// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Example model - replace with your actual schema
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(80)
  username     String   @unique @db.VarChar(80)
  password     String   @db.VarChar(255)
  phone_number String?  @db.VarChar(16)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamp(0)

  lessons              Lesson[]
  wordUserMarks        WordUserMark[]
  userLessonProgresses UserLessonProgress[]
  userActionLogs       UserActionLog[]

  @@map("user")
}

enum LessonType {
  text
  subtitle
  manga
}

enum LessonProcessingStatus {
  pending
  completed
  failed
}

model Lesson {
  id                Int                    @id @default(autoincrement())
  created_by        Int
  title             String                 @db.VarChar(255)
  lesson_type       LessonType             @default(subtitle)
  processing_status LessonProcessingStatus @default(completed)
  language_code     String                 @db.VarChar(10)
  image_s3_key      String?                @db.VarChar(500)
  audio_s3_key      String?                @db.VarChar(500)
  created_at        DateTime               @default(now()) @db.Timestamp(0)
  updated_at        DateTime               @default(now()) @updatedAt @db.Timestamp(0)

  user                 User                 @relation(fields: [created_by], references: [id])
  sentences            Sentence[]
  userLessonProgresses UserLessonProgress[]
  lessonFiles          LessonFile[]

  @@map("lesson")
}

model LessonFile {
  id          Int      @id @default(autoincrement())
  lesson_id   Int
  file_s3_key String?  @db.VarChar(500)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(0)

  lesson   Lesson     @relation(fields: [lesson_id], references: [id])
  sentence Sentence[]

  @@map("lesson_file")
}

enum UserLessonProgressStatus {
  reading
  finished
}

model UserLessonProgress {
  id                    Int                      @id @default(autoincrement())
  user_id               Int
  lesson_id             Int
  status                UserLessonProgressStatus
  read_till_sentence_id Int
  created_at            DateTime                 @default(now()) @db.Timestamp(0)
  updated_at            DateTime                 @default(now()) @updatedAt @db.Timestamp(0)

  user     User     @relation(fields: [user_id], references: [id])
  lesson   Lesson   @relation(fields: [lesson_id], references: [id])
  sentence Sentence @relation(fields: [read_till_sentence_id], references: [id])

  @@unique([user_id, lesson_id])
  @@map("user_lesson_progress")
}

model Sentence {
  id             Int      @id @default(autoincrement())
  lesson_id      Int
  lesson_file_id Int
  original_text  String   @db.Text
  split_text     Json?
  start_time     Decimal? @db.Decimal(10, 3)
  end_time       Decimal? @db.Decimal(10, 3)
  created_at     DateTime @default(now()) @db.Timestamp(0)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamp(0)

  lesson               Lesson                @relation(fields: [lesson_id], references: [id])
  lessonFile           LessonFile            @relation(fields: [lesson_file_id], references: [id])
  sentenceTranslations SentenceTranslation[]
  sentenceWords        SentenceWord[]
  userLessonProgresses UserLessonProgress[]

  @@map("sentence")
}

model SentenceTranslation {
  id            Int      @id @default(autoincrement())
  sentence_id   Int
  language_code String   @db.VarChar(10)
  translation   String   @db.Text
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamp(0)

  sentence Sentence @relation(fields: [sentence_id], references: [id])

  @@unique([sentence_id, language_code])
  @@map("sentence_translation")
}

model Word {
  id            Int      @id @default(autoincrement())
  word          String   @db.VarChar(255)
  language_code String   @db.VarChar(10)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamp(0)

  wordTranslations   WordTranslation[]
  wordPronunciations WordPronunciation[]
  wordUserMarks      WordUserMark[]
  sentenceWords      SentenceWord[]
  stems              WordStem[]

  @@unique([word, language_code])
  @@index([word])
  @@map("word")
}

model WordTranslation {
  id            Int      @id @default(autoincrement())
  word_id       Int
  language_code String   @db.VarChar(10)
  translation   String
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamp(0)

  word Word @relation(fields: [word_id], references: [id])

  @@unique([word_id, language_code, translation])
  @@map("word_translation")
}

model WordPronunciation {
  id                 Int      @id @default(autoincrement())
  word_id            Int
  pronunciation      String   @db.VarChar(255)
  pronunciation_type String?  @db.VarChar(20) // e.g., 'hiragana', 'romanji', 'ipa', etc.
  created_at         DateTime @default(now()) @db.Timestamp(0)
  updated_at         DateTime @default(now()) @updatedAt @db.Timestamp(0)

  word Word @relation(fields: [word_id], references: [id])

  @@unique([word_id, pronunciation, pronunciation_type])
  @@map("word_pronunciation")
}

model WordStem {
  id         Int      @id @default(autoincrement())
  word_id    Int
  stem       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)

  word Word @relation(fields: [word_id], references: [id])

  @@unique([word_id, stem])
  @@map("word_stem")
}

enum WordUserMarkSource {
  lesson
  import
  ling_q
}

model WordUserMark {
  id         Int                @id @default(autoincrement())
  user_id    Int
  word_id    Int
  note       String             @db.VarChar(512)
  mark       Int // from 0 -> 5, 0: ignore, 1: don't remember, 2: hard to remember, 3: remembered, 4: easy to remember, 5: no problem remembering
  source     WordUserMarkSource @default(lesson)
  created_at DateTime           @default(now()) @db.Timestamp(0)
  updated_at DateTime           @default(now()) @updatedAt @db.Timestamp(0)

  user User @relation(fields: [user_id], references: [id])
  word Word @relation(fields: [word_id], references: [id])

  @@unique([user_id, word_id])
  @@map("word_user_mark")
}

model SentenceWord {
  id          Int      @id @default(autoincrement())
  word_id     Int
  sentence_id Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(0)

  word     Word     @relation(fields: [word_id], references: [id])
  sentence Sentence @relation(fields: [sentence_id], references: [id])

  @@unique([word_id, sentence_id])
  @@map("sentence_word")
}

enum UserActionType {
  word_mark
  read
}

model UserActionLog {
  id            Int            @id @default(autoincrement())
  user_id       Int
  language_code String         @db.VarChar(10)
  type          UserActionType
  is_read       Boolean?       @default(dbgenerated("IF(type = 'read', 1, NULL)"))
  action        Json
  word_id       Int?           @default(dbgenerated("JSON_EXTRACT(action, '$.word_id')"))
  sentence_id   Int?           @default(dbgenerated("JSON_EXTRACT(action, '$.sentence_id')"))
  created_at    DateTime       @default(now()) @db.Timestamp(0)

  user User @relation(fields: [user_id], references: [id])

  @@unique([is_read, user_id, word_id, sentence_id])
  @@map("user_action_log")
}
